# Import libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from raiwidgets import ResponsibleAIDashboard
from responsibleai import RAIInsights

# Load the IMDB dataset
data = pd.read_csv("C:\\Users\\Prekshitha Shetty\\Downloads\\imdb_Top_250_TV_Shows.csv")  # Update the path as needed

# Preprocess the data
data['Release Year'] = data['Release Year'].str.extract('(\d{4})').astype(float)
data['Episodes'] = data['Episodes'].str.extract('(\d+)').astype(float)
data['Rating given by people'] = data['Rating given by people'].str.extract('(\d+\.?\d*)').astype(float)
data = data.dropna()

# Create a binary classification target
data['Released After 2000'] = (data['Release Year'] >= 2000).astype(int)

# Define features and target
feature_columns = ['Episodes', 'Rating given by people']
target_column = 'Released After 2000'

X = data[feature_columns]
y = data[target_column]

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Random Forest model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.4f}")

# Prepare data for RAIInsights
train_data = X_train.copy()
train_data[target_column] = y_train

test_data = X_test.copy()
test_data[target_column] = y_test

# Initialize RAIInsights
rai_insights = RAIInsights(
    model=model,
    train=train_data,
    test=test_data,
    target_column=target_column,
    task_type='classification'
)

# Add explanation, error analysis, and counterfactual modules
rai_insights.explainer.add()
rai_insights.error_analysis.add()
rai_insights.counterfactual.add(total_CFs=10, desired_class='opposite')

# Compute insights
rai_insights.compute()

# Launch Responsible AI Dashboard
ResponsibleAIDashboard(rai_insights)
