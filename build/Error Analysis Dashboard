import pandas as pd
import numpy as np
from raiwidgets import ErrorAnalysisDashboard
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.losses import MeanSquaredError
from tensorflow.keras.metrics import MeanAbsoluteError
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import joblib

# Chunk 2: Load and prepare data
data = pd.read_csv("/content/imdb_Top_250_TV_Shows.csv")

# Clean the data
data['Release Year'] = data['Release Year'].str.extract('(\d{4})').astype(float)
data['Episodes'] = data['Episodes'].str.extract('(\d+)').astype(float)
data['Rating given by people'] = data['Rating given by people'].str.extract('(\d+\.?\d*)').astype(float)

# Define features and target
feature_columns = ['Release Year', 'Episodes', 'Rating given by people']
X = data[feature_columns]
y = data['Rating']

# Chunk 3: Train-test split and scaling
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Chunk 4: Create and train model
model = Sequential([
    Dense(64, activation='relu', input_shape=(len(feature_columns),)),
    Dropout(0.2),
    Dense(32, activation='relu'),
    Dropout(0.2),
    Dense(1)
])

model.compile(
    optimizer='adam',
    loss=MeanSquaredError(),
    metrics=[MeanAbsoluteError()]
)

history = model.fit(
    X_train_scaled,
    y_train,
    epochs=50,
    batch_size=32,
    validation_split=0.2,
    verbose=1
)

# Chunk 5: Save model and scaler
model.save('imdb_model.h5')
joblib.dump(scaler, 'imdb_scaler.pkl')

# Chunk 6: Predictions and Error Analysis
X_scaled = scaler.transform(X)
pred_y = model.predict(X_scaled).flatten()

# Chunk 7: Create Error Analysis Dashboard
categorical_features = []

dashboard = ErrorAnalysisDashboard(
    explanation=None,
    model=None,
    dataset=X,
    true_y=y,
    classes=None,
    features=feature_columns,
    categorical_features=categorical_features,
    pred_y=pred_y
)

# Chunk 8: Visualization Functions
import matplotlib.pyplot as plt
import seaborn as sns

def plot_training_history():
    plt.figure(figsize=(12, 4))

    plt.subplot(1, 2, 1)
    plt.plot(history.history['loss'], label='Training Loss')
    plt.plot(history.history['val_loss'], label='Validation Loss')
    plt.title('Model Loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.legend()

    plt.subplot(1, 2, 2)
    plt.plot(history.history['mean_absolute_error'], label='Training MAE')
    plt.plot(history.history['val_mean_absolute_error'], label='Validation MAE')
    plt.title('Model MAE')
    plt.xlabel('Epoch')
    plt.ylabel('MAE')
    plt.legend()

    plt.tight_layout()
    plt.show()

def plot_predictions():
    plt.figure(figsize=(15, 5))

    # Error Distribution
    plt.subplot(1, 3, 1)
    errors = np.abs(y - pred_y)
    sns.histplot(errors)
    plt.title('Error Distribution')

    # Actual vs Predicted
    plt.subplot(1, 3, 2)
    plt.scatter(y, pred_y, alpha=0.5)
    plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
    plt.xlabel('Actual Ratings')
    plt.ylabel('Predicted Ratings')
    plt.title('Actual vs Predicted')

    # Feature Importance using correlation
    plt.subplot(1, 3, 3)
    correlations = [abs(X[col].corr(pd.Series(errors))) for col in feature_columns]
    sns.barplot(x=feature_columns, y=correlations)
    plt.xticks(rotation=45)
    plt.title('Feature-Error Correlation')

    plt.tight_layout()
    plt.show()

# Chunk 9: Analysis Functions
def compute_metrics():
    errors = np.abs(y - pred_y)
    metrics = {
        'Mean Absolute Error': np.mean(errors),
        'Median Absolute Error': np.median(errors),
        'Max Error': np.max(errors),
        'Min Error': np.min(errors),
        'Standard Deviation of Error': np.std(errors)
    }
    return metrics

# Chunk 10: Execute Analysis
if __name__ == "__main__":
    print("Model Performance Metrics:")
    print(compute_metrics())

    print("\nPlotting Training History...")
    plot_training_history()

    print("\nPlotting Prediction Analysis...")
    plot_predictions()

    print("\nLaunching Error Analysis Dashboard...")
    dashboard
